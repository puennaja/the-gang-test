// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dto "daveslist/internal/core/domain/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuthService) Authorize(ctx context.Context, req *dto.AuthorizeRequest) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", ctx, req)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthServiceMockRecorder) Authorize(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthService)(nil).Authorize), ctx, req)
}

// MockCategoryService is a mock of CategoryService interface.
type MockCategoryService struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryServiceMockRecorder
}

// MockCategoryServiceMockRecorder is the mock recorder for MockCategoryService.
type MockCategoryServiceMockRecorder struct {
	mock *MockCategoryService
}

// NewMockCategoryService creates a new mock instance.
func NewMockCategoryService(ctrl *gomock.Controller) *MockCategoryService {
	mock := &MockCategoryService{ctrl: ctrl}
	mock.recorder = &MockCategoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryService) EXPECT() *MockCategoryServiceMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockCategoryService) CreateCategory(ctx context.Context, data *dto.CreateCategoryRequest) (*dto.CategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, data)
	ret0, _ := ret[0].(*dto.CategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockCategoryServiceMockRecorder) CreateCategory(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCategoryService)(nil).CreateCategory), ctx, data)
}

// DeleteCategory mocks base method.
func (m *MockCategoryService) DeleteCategory(ctx context.Context, id string) (*dto.CategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, id)
	ret0, _ := ret[0].(*dto.CategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockCategoryServiceMockRecorder) DeleteCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockCategoryService)(nil).DeleteCategory), ctx, id)
}

// GetCategoryList mocks base method.
func (m *MockCategoryService) GetCategoryList(ctx context.Context, query *dto.CategoryQuery) (*dto.PaginationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryList", ctx, query)
	ret0, _ := ret[0].(*dto.PaginationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryList indicates an expected call of GetCategoryList.
func (mr *MockCategoryServiceMockRecorder) GetCategoryList(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryList", reflect.TypeOf((*MockCategoryService)(nil).GetCategoryList), ctx, query)
}

// MockListingService is a mock of ListingService interface.
type MockListingService struct {
	ctrl     *gomock.Controller
	recorder *MockListingServiceMockRecorder
}

// MockListingServiceMockRecorder is the mock recorder for MockListingService.
type MockListingServiceMockRecorder struct {
	mock *MockListingService
}

// NewMockListingService creates a new mock instance.
func NewMockListingService(ctrl *gomock.Controller) *MockListingService {
	mock := &MockListingService{ctrl: ctrl}
	mock.recorder = &MockListingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListingService) EXPECT() *MockListingServiceMockRecorder {
	return m.recorder
}

// CreateListing mocks base method.
func (m *MockListingService) CreateListing(ctx context.Context, data *dto.CreateListingRequest) (*dto.ListingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListing", ctx, data)
	ret0, _ := ret[0].(*dto.ListingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListing indicates an expected call of CreateListing.
func (mr *MockListingServiceMockRecorder) CreateListing(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListing", reflect.TypeOf((*MockListingService)(nil).CreateListing), ctx, data)
}

// CreateReplyListing mocks base method.
func (m *MockListingService) CreateReplyListing(ctx context.Context, data *dto.CreateReplyListingRequest) (*dto.ReplyListingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReplyListing", ctx, data)
	ret0, _ := ret[0].(*dto.ReplyListingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReplyListing indicates an expected call of CreateReplyListing.
func (mr *MockListingServiceMockRecorder) CreateReplyListing(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReplyListing", reflect.TypeOf((*MockListingService)(nil).CreateReplyListing), ctx, data)
}

// DeleteListing mocks base method.
func (m *MockListingService) DeleteListing(ctx context.Context, data *dto.DeleteListingRequest) (*dto.ListingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteListing", ctx, data)
	ret0, _ := ret[0].(*dto.ListingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteListing indicates an expected call of DeleteListing.
func (mr *MockListingServiceMockRecorder) DeleteListing(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteListing", reflect.TypeOf((*MockListingService)(nil).DeleteListing), ctx, data)
}

// GetListingList mocks base method.
func (m *MockListingService) GetListingList(ctx context.Context, query *dto.ListingQuery) (*dto.PaginationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListingList", ctx, query)
	ret0, _ := ret[0].(*dto.PaginationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListingList indicates an expected call of GetListingList.
func (mr *MockListingServiceMockRecorder) GetListingList(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListingList", reflect.TypeOf((*MockListingService)(nil).GetListingList), ctx, query)
}

// GetReplyListingList mocks base method.
func (m *MockListingService) GetReplyListingList(ctx context.Context, query *dto.ReplyListingQuery) (*dto.PaginationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplyListingList", ctx, query)
	ret0, _ := ret[0].(*dto.PaginationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplyListingList indicates an expected call of GetReplyListingList.
func (mr *MockListingServiceMockRecorder) GetReplyListingList(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplyListingList", reflect.TypeOf((*MockListingService)(nil).GetReplyListingList), ctx, query)
}

// HideListing mocks base method.
func (m *MockListingService) HideListing(ctx context.Context, data *dto.HideListingRequest) (*dto.ListingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HideListing", ctx, data)
	ret0, _ := ret[0].(*dto.ListingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HideListing indicates an expected call of HideListing.
func (mr *MockListingServiceMockRecorder) HideListing(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HideListing", reflect.TypeOf((*MockListingService)(nil).HideListing), ctx, data)
}

// UpdateListing mocks base method.
func (m *MockListingService) UpdateListing(ctx context.Context, data *dto.UpdateListingRequest) (*dto.ListingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateListing", ctx, data)
	ret0, _ := ret[0].(*dto.ListingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateListing indicates an expected call of UpdateListing.
func (mr *MockListingServiceMockRecorder) UpdateListing(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListing", reflect.TypeOf((*MockListingService)(nil).UpdateListing), ctx, data)
}

// MockMessageService is a mock of MessageService interface.
type MockMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockMessageServiceMockRecorder
}

// MockMessageServiceMockRecorder is the mock recorder for MockMessageService.
type MockMessageServiceMockRecorder struct {
	mock *MockMessageService
}

// NewMockMessageService creates a new mock instance.
func NewMockMessageService(ctrl *gomock.Controller) *MockMessageService {
	mock := &MockMessageService{ctrl: ctrl}
	mock.recorder = &MockMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageService) EXPECT() *MockMessageServiceMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockMessageService) CreateMessage(ctx context.Context, data *dto.CreateMessageRequest) (*dto.MessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", ctx, data)
	ret0, _ := ret[0].(*dto.MessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockMessageServiceMockRecorder) CreateMessage(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockMessageService)(nil).CreateMessage), ctx, data)
}

// GetMessageList mocks base method.
func (m *MockMessageService) GetMessageList(ctx context.Context, query *dto.MessageQuery) (*dto.PaginationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageList", ctx, query)
	ret0, _ := ret[0].(*dto.PaginationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageList indicates an expected call of GetMessageList.
func (mr *MockMessageServiceMockRecorder) GetMessageList(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageList", reflect.TypeOf((*MockMessageService)(nil).GetMessageList), ctx, query)
}
